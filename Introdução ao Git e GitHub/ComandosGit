COMO USAR COMANDOS GIT? APRENDA OS BÁSICOS!🤖️

Existe uma máxima hoje em qualquer ambiente que se trabalhe com TI que é: “Em caso de incêndio:🔥️

	👉🏼️ 1 - git commit,

	👉🏼️ 2 - git push,

	👉🏼️ 3 - Saia do recinto”.

Apesar do ar cômico, esses dois comandos (acompanhados de um terceiro) são os responsáveis por salvar muitos projetos (ou pelo arrependimento de quem esqueceu de usá-los) e eu vou te explicar o que cada um deles faz.🚀️



✅️Git init
O comando git init cria um novo repositório do Git. Ele pode ser usado para converter um projeto existente e não versionado em um repositório do Git ou inicializar um novo repositório vazio. A maioria dos outros comandos Git não está disponível fora de um repositório inicializado, portanto, este costuma ser o primeiro comando que você executa em um novo projeto.

✅️Git add
Este comando adiciona os arquivos solicitados ao ambiente de stage, é uma forma de dizer para o git que você deseja que as modificações daquele arquivo sejam gravadas na próxima remessa. Um exemplo de utilização é: git add . onde o ponto representa todos os arquivos na pasta.

✅️Git commit
Agora fazemos a gravação em si das modificações, desta forma criamos um snapshot do estado atual do nosso projeto. Uma forma muito usada é o git commit -m “descrição das atualizações do projeto” onde o -m é uma flag que aponta para a mensagem de descrição.

✅️Git remote
Nada mais é do que apontar o caminho(repositório) para aonde você ira subir o seu projeto, por exemplo (git remote add origin "endereço do repositório").

✅️Git push
Por fim precisamos subir essas modificações no nosso repositório remoto, para isso basta utilizar o comando git push e, se já estiver tudo devidamente configurado, os arquivos serão salvos no repositório remoto correspondente ao seu repositório local!

✅️Git status
Este comando permite ver quais arquivos estão sendo “rastreados” pelo git e quais modificações já foram enviadas para o stage. É bem útil para quando se tem dúvidas sobre o que está sendo enviado

✅️Git branch
É usado para verificar todas as branches presentes no repositório. Ao utilizar a flag -r no final do comando é possível ver todas as branches presentes no repositório remoto e se você quiser criar uma nova branch basta utilizar este comando: git branch (branch_name).

✅️Git stash
Git stash arquiva (ou faz o stash) de alterações que você fez na cópia de trabalho durante um determinado período, para que você possa trabalhar em outra coisa, depois voltar e fazer a reaplicação mais tarde. O stashing é útil quando você precisa alternar com rapidez o contexto e trabalhar em outra coisa, mas está no meio da alteração de código e não está pronto para fazer commit.

✅️Git checkout
É o comando utilizado para trocar de branch passando o nome da branch destino no final do comando. Caso a flag -b seja colocada após o “checkout” é possível criar a branch em questão e já trocar para esta imediatamente.

✅️Git merge
Então o merge é local sempre. Quando você deseja atualizar outro repositório você traz seu conteúdo para o seu repositório local atual, faz o merge e manda de volta o conteúdo do seu repositório para o repositório original, possivelmente remoto.

✅️Git clone
Este comando irá clonar o projeto remoto na sua máquina local, exemplo git clone (endereço do projeto remoto que ira clonar).

👨🏻‍💻 Tom Mereles
